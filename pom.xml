<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.mace</groupId>
    <artifactId>SpringBootDemo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <description>SpringBoot集成项目入门</description>

    <!-- 添加继承Spring Boot依赖 父类及版本 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.2.RELEASE</version>
    </parent>

    <properties>
        <!-- 统一编译编码 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- maven编译时的编码 -->
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
        <!-- 版本号 -->
        <java-version>1.8</java-version>
        <jasypt-spring-boot-starter>2.0.0</jasypt-spring-boot-starter>
        <mybatis-spring-boot-starter>1.3.1</mybatis-spring-boot-starter>
        <druid-spring-boot-starter>1.1.9</druid-spring-boot-starter>
        <mybatis-pagehelper-version>1.2.3</mybatis-pagehelper-version>
        <ojdbc6-version>11.2.0.3</ojdbc6-version>
        <mybatis-generator-version>1.3.2</mybatis-generator-version>
        <fastjson-version>1.2.47</fastjson-version>
        <swagger-version>2.7.0</swagger-version>
        <api2doc-version>1.0.1</api2doc-version>
        <restpack-version>1.0.1</restpack-version>
        <common-net-version>1.6</common-net-version>
        <ftp-version>3.1</ftp-version>
        <google-collections-version>1.0</google-collections-version>
    </properties>

    <dependencies>

        <!-- 热部署 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- 添加支持全栈式Web开发，包括Tomcat和spring webmvc所需库 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- springboot 安全认证 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <!-- 添加 支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- springboot aop -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- freemarker 动态页面静态化 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>
        <!-- springboot集成 thymeleaf 文件后缀名为.html -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- springboot集成 mongodb -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <!-- springboot集成 redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!--spring2.0集成redis所需common-pool2-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
            <version>2.4.2</version>
        </dependency>
        <!-- springboot实现基于redis的session共享 -->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>
        <!-- springboot集成 solr -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-solr</artifactId>
        </dependency>

        <!-- springboot集成 mybatis -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis-spring-boot-starter}</version>
        </dependency>
        <!--pagehelper-->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>${mybatis-pagehelper-version}</version>
        </dependency>
        <!-- druid数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>${druid-spring-boot-starter}</version>
        </dependency>
        <!-- mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!-- oracle-connector-java -->
        <dependency>
            <groupId>com.oracle</groupId>
            <artifactId>ojdbc6</artifactId>
            <version>${ojdbc6-version}</version>
        </dependency>
        <!-- Mybatis Generator -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>${mybatis-generator-version}</version>
        </dependency>

        <!-- springboot集成RabbitMQ -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <!-- springboot集成kafka 配置server.properties远程访问开启 指定host.name -->
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>


        <!-- 配置文件密码加密 -->
        <dependency>
            <groupId>com.github.ulisesbocchio</groupId>
            <artifactId>jasypt-spring-boot-starter</artifactId>
            <version>${jasypt-spring-boot-starter}</version>
        </dependency>
        <!-- SpringMVC JSON解析 com.alibaba.fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson-version}</version>
        </dependency>
        <!-- lombok注解 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>compile</scope>
        </dependency>

        <!--
            Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。
            总体目标是使客户端和文件系统作为服务器以同样的速度来更新。
            文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。
        -->
        <!-- springfox-swagger2 -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger-version}</version>
        </dependency>
        <!-- springfox-swagger-ui -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger-version}</version>
        </dependency>

        <!-- 比 Swagger2 好用, @EnableApi2Doc 文档访问地址： http://你的项目地址/api2doc/home.html -->
        <dependency>
            <groupId>com.github.terran4j</groupId>
            <artifactId>terran4j-commons-api2doc</artifactId>
            <version>${api2doc-version}</version>
        </dependency>

        <!-- 帮助 Restful API 的开发者将API 的返回结果自动包装成统一格式的报文 -->
        <!--
           success:{
                    "requestId": "8492ea07e6114a11a4f59d90ebb6582c",
                    "serverTime": 1529994345583,
                    "spendTime": 32,
                    "resultCode": "success",
                    "data": "Hello mace"
                   }

            aop-success: {
                            "requestId": "9c09978a83c248388be7485eae1d774c",
                            "serverTime": "2018-06-26 16:36:11.077",
                            "spendTime": 1,
                            "resultCode": "success",
                            "message": "测试成功",
                            "data": "Hello mace"
                         }

             fail:  {
                      "requestId" : "d7ab68ac513e4549896aa33f0cda3518",
                      "serverTime" : 1502594589673,
                      "spendTime" : 8,
                      "resultCode" : "name.duplicate",
                      "message" : "昵称重复： terran4j，请换个昵称！",
                      "props" : {
                        "name": "terran4j"
                      }
                    }

             aop-fail: {
                        "requestId": "2008b03840bd4531b6be220828ceda0d",
                        "serverTime": "2018-06-26 17:51:39.028",
                        "spendTime": 864,
                        "resultCode": "name.duplicate",
                        "message": "昵称重复: mace ,请换个昵称!",
                        "props":{
                        "username": "mace"
                        }
                    }

             aop-exception: {
                                "requestId": "f6563a76417549888cf326d4cd92e545",
                                "serverTime": "2018-06-27 12:37:00.797",
                                "spendTime": 6,
                                "resultCode": "exception",
                                "message": "class java.lang.ArithmeticException",
                                "data": {
                                    "ex_message": "/ by zero",
                                    "stackTrace": "com.mace.controller.test.TestSwaggerController.testEx(TestSwaggerController.java:71)",
                                    "url": "http://127.0.0.1:8088/swagger/testEx.do"
                                }
                            }

        -->
        <!--<dependency>-->
            <!--<groupId>com.github.terran4j</groupId>-->
            <!--<artifactId>terran4j-commons-restpack</artifactId>-->
            <!--<version>${restpack-version}</version>-->
        <!--</dependency>-->


        <!-- solr安全认证后java客户端访问增加依赖commons-codec -->
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${common-net-version}</version>
        </dependency>
        <!-- FTP依赖 -->
        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
            <version>${ftp-version}</version>
        </dependency>
        <!-- 好用的集合类库 -->
        <dependency>
            <groupId>com.google.collections</groupId>
            <artifactId>google-collections</artifactId>
            <version>${google-collections-version}</version>
        </dependency>
        <!-- commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <!-- 阿里云 SMS -->
        <dependency>
            <groupId>com.aliyun</groupId>
            <artifactId>aliyun-java-sdk-core</artifactId>
            <version>3.3.1</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/src/main/resources/lib/aliyun-java-sdk-core-3.3.1.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>com.aliyun</groupId>
            <artifactId>aliyun-java-sdk-dysmsapi</artifactId>
            <version>1.1.0</version>
        </dependency>


    </dependencies>



    <build>
        <plugins>
            <!-- maven 编译插件 1.8 -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java-version}</source>
                    <target>${java-version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!-- 配置spring boot maven构建插件 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!--fork :  如果没有该项配置，肯定devtools不会起作用，即应用不会restart -->
                    <fork>true</fork>
                    <!-- 主入口 -->
                    <mainClass>com.mace.Application</mainClass>
                </configuration>
            </plugin>

        </plugins>

        <resources>
            <!-- 打包编译项目时 src下的xml也编译到target目录 -->
            <!--<resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>-->
            <!-- 打包编译项目时 resources目录下的所有文件也编译到 target目录 -->
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
        </resources>
    </build>
</project>